import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '../../utils/supabase';

// GET - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç—Ä–µ–∫–∏–Ω–≥–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏
export async function GET() {
  try {
    console.log('üìã [TRACKING API] –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–∫–∏–Ω–≥–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    
    const { data: links, error } = await supabase
      .from('tracking_links')
      .select('*')
      .order('created_at', { ascending: false });

    if (error) {
      console.error('‚ùå [TRACKING API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫:', error);
      return NextResponse.json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö' }, { status: 500 });
    }

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–∏
    const linksWithStats = await Promise.all(
      (links || []).map(async (link) => {
        const { count } = await supabase
          .from('user_traffic_sources')
          .select('*', { count: 'exact' })
          .eq('tracking_link_id', link.id);

        return {
          ...link,
          clicks: count || 0
        };
      })
    );

    console.log('‚úÖ [TRACKING API] –í–æ–∑–≤—Ä–∞—â–∞–µ–º', linksWithStats.length, '—Å—Å—ã–ª–æ–∫');
    return NextResponse.json({ links: linksWithStats });
    
  } catch (error) {
    console.error('‚ùå [TRACKING API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫:', error);
    return NextResponse.json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 });
  }
}

// POST - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–µ–∫–∏–Ω–≥–æ–≤—É—é —Å—Å—ã–ª–∫—É
export async function POST(request: NextRequest) {
  try {
    console.log('üìù [TRACKING API] –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–µ–∫–∏–Ω–≥–æ–≤–æ–π —Å—Å—ã–ª–∫–∏');
    
    const body = await request.json();
    const { name, source, medium, campaign, content, term } = body;

    if (!name || !source) {
      return NextResponse.json({ error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' }, { status: 400 });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥
    const code = generateUniqueCode();
    
    // –°–æ–∑–¥–∞–µ–º UTM-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const utmParams = new URLSearchParams();
    utmParams.set('utm_source', source);
    if (medium) utmParams.set('utm_medium', medium);
    if (campaign) utmParams.set('utm_campaign', campaign);
    if (content) utmParams.set('utm_content', content);
    if (term) utmParams.set('utm_term', term);
    utmParams.set('ref', code);

    const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000';
    const trackingUrl = `${baseUrl}?${utmParams.toString()}`;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const { data: link, error } = await supabase
      .from('tracking_links')
      .insert({
        name,
        code,
        source,
        medium,
        campaign,
        content,
        term,
        url: trackingUrl,
        is_active: true
      })
      .select()
      .single();

    if (error) {
      console.error('‚ùå [TRACKING API] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏:', error);
      return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏' }, { status: 500 });
    }

    console.log('‚úÖ [TRACKING API] –°—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', link.name);
    return NextResponse.json({ link: { ...link, clicks: 0 } });
    
  } catch (error) {
    console.error('‚ùå [TRACKING API] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏:', error);
    return NextResponse.json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 });
  }
}

// DELETE - —É–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫–∏–Ω–≥–æ–≤—É—é —Å—Å—ã–ª–∫—É
export async function DELETE(request: NextRequest) {
  try {
    console.log('üóëÔ∏è [TRACKING API] –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∏–Ω–≥–æ–≤–æ–π —Å—Å—ã–ª–∫–∏');
    
    const { searchParams } = new URL(request.url);
    const id = searchParams.get('id');

    if (!id) {
      return NextResponse.json({ error: 'ID —Å—Å—ã–ª–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }, { status: 400 });
    }

    const { error } = await supabase
      .from('tracking_links')
      .delete()
      .eq('id', id);
    
    if (error) {
      console.error('‚ùå [TRACKING API] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏:', error);
      return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏' }, { status: 500 });
    }

    console.log('‚úÖ [TRACKING API] –°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞, ID:', id);
    return NextResponse.json({ success: true });
    
  } catch (error) {
    console.error('‚ùå [TRACKING API] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏:', error);
    return NextResponse.json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 });
  }
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
function generateUniqueCode(): string {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let result = '';
  for (let i = 0; i < 8; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
} 