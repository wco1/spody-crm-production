'use client';

import { useState, useEffect } from 'react';
import { Users, MessageSquare, TrendingUp, ActivitySquare } from 'lucide-react';
import StatsCard from '../components/StatsCard';
import ChartCard from '../components/ChartCard';
import React from 'react';
import { supabase } from '../utils/supabase';
import LoadingSpinner from '../components/LoadingSpinner';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
interface ChartDataPoint {
  name: string;
  value: number;
}

interface StatsData {
  totalUsers: number;
  activeUsers: number;
  totalModels: number;
  modelsWithUsers: number;
  userActivity: ChartDataPoint[];
  messagesPerDay: ChartDataPoint[];
  modelUsage: ChartDataPoint[];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
function groupByWeekday(profiles: Array<{ created_at: string }>): ChartDataPoint[] {
  const dayNames = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
  const registrationsByDay: Record<string, number> = {};
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –Ω—É–ª—è–º–∏
  dayNames.forEach(day => {
    registrationsByDay[day] = 0;
  });
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
  profiles.forEach(profile => {
    const date = new Date(profile.created_at);
    const dayIndex = date.getDay(); // 0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, ...
    
    // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: 0=–í—Å, 1=–ü–Ω, 2=–í—Ç, 3=–°—Ä, 4=–ß—Ç, 5=–ü—Ç, 6=–°–±
    const dayName = dayIndex === 0 ? '–í—Å' : dayNames[dayIndex - 1];
    
    registrationsByDay[dayName]++;
  });
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
  return dayNames.map(dayName => ({
    name: dayName,
    value: registrationsByDay[dayName]
  }));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
function groupMessagesByWeekday(messages: Array<{ created_at: string }>): ChartDataPoint[] {
  const dayNames = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
  const messagesByDay: Record<string, number> = {};
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –Ω—É–ª—è–º–∏
  dayNames.forEach(day => {
    messagesByDay[day] = 0;
  });
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
  messages.forEach(message => {
    const date = new Date(message.created_at);
    const dayIndex = date.getDay(); // 0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, ...
    
    // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: 0=–í—Å, 1=–ü–Ω, 2=–í—Ç, 3=–°—Ä, 4=–ß—Ç, 5=–ü—Ç, 6=–°–±
    const dayName = dayIndex === 0 ? '–í—Å' : dayNames[dayIndex - 1];
    
    messagesByDay[dayName]++;
  });
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
  return dayNames.map(dayName => ({
    name: dayName,
    value: messagesByDay[dayName]
  }));
}

export default function Dashboard() {
  const [loading, setLoading] = useState<boolean>(true);
  const [stats, setStats] = useState<StatsData | null>(null);
  const [error, setError] = useState<string | null>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase
  useEffect(() => {
    async function fetchDashboardData() {
      try {
        setLoading(true);
        
        console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase...');
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –¥–ª—è –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        const { data: recentProfilesData, error: recentProfilesError } = await supabase
          .from('profiles')
          .select('*')
          .gte('created_at', thirtyDaysAgo.toISOString());
        
        if (recentProfilesError) {
          console.error('Error fetching recent profiles data:', recentProfilesError);
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π');
        }
        
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:', recentProfilesData?.length);

        // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const { data: allProfilesData, error: allProfilesError } = await supabase
          .from('profiles')
          .select('*');
        
        if (allProfilesError) {
          console.error('Error fetching all profiles data:', allProfilesError);
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ–ª–µ–π –ò–ò
        const { data: modelsData, error: modelsError } = await supabase
          .from('ai_models')
          .select('*');
        
        if (modelsError) {
          console.error('Error fetching models data:', modelsError);
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–µ–π');
        }
        
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –º–æ–¥–µ–ª–∏ –ò–ò:', modelsData?.length);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ chat_messages (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        const { data: chatMessagesData, error: chatMessagesError } = await supabase
          .from('chat_messages')
          .select('*')
          .limit(2000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        
        console.log('üìß –°–æ–æ–±—â–µ–Ω–∏—è –∏–∑ chat_messages:', chatMessagesError ? `–û—à–∏–±–∫–∞: ${chatMessagesError.message}` : `–ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${chatMessagesData?.length || 0}`);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const userMessages = chatMessagesData?.filter(msg => msg.is_user === true) || [];
        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', userMessages.length);

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ—Å–µ–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        const { data: conversationsData, error: conversationsError } = await supabase
          .from('conversations')
          .select('*')
          .limit(1000);
        
        console.log('üí¨ –ë–µ—Å–µ–¥—ã:', conversationsError ? `–û—à–∏–±–∫–∞: ${conversationsError.message}` : `–ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${conversationsData?.length || 0}`);

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–æ–≤ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const { data: chatsData, error: chatsError } = await supabase
          .from('chats')
          .select('*');
        
        console.log('üó®Ô∏è –ß–∞—Ç—ã:', chatsError ? `–û—à–∏–±–∫–∞: ${chatsError.message}` : `–ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${chatsData?.length || 0}`);

        // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        const userActivity = groupByWeekday(recentProfilesData || []);

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –ø–æ –ø–æ–ª—É
        const modelsByGender = modelsData?.reduce((acc: Record<string, number>, model) => {
          const gender = model.gender || '–Ω–µ —É–∫–∞–∑–∞–Ω';
          acc[gender] = (acc[gender] || 0) + 1;
          return acc;
        }, {}) || {};

        const modelUsage = Object.entries(modelsByGender).map(([gender, count]) => ({
          name: `${gender} –ø–æ–ª`,
          value: count as number
        }));

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ chat_messages
        const totalChatMessages = chatMessagesData?.length || 0;
        const totalUserMessages = userMessages.length;
        const totalConversations = conversationsData?.length || 0;
        const totalChats = chatsData?.length || 0;
        const totalUsers = allProfilesData?.length || 0;
        
        let messagesPerDay: ChartDataPoint[];
        
        if (totalUserMessages > 0) {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
          messagesPerDay = groupMessagesByWeekday(userMessages);
          console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ chat_messages');
        } else {
          // Fallback –∫ –æ—Ü–µ–Ω–æ—á–Ω—ã–º –¥–∞–Ω–Ω—ã–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          messagesPerDay = [
            { name: '–ü–Ω', value: Math.max(1, Math.floor(totalUsers * 0.1)) },
            { name: '–í—Ç', value: Math.max(1, Math.floor(totalUsers * 0.12)) },
            { name: '–°—Ä', value: Math.max(1, Math.floor(totalUsers * 0.08)) },
            { name: '–ß—Ç', value: Math.max(1, Math.floor(totalUsers * 0.15)) },
            { name: '–ü—Ç', value: Math.max(1, Math.floor(totalUsers * 0.13)) },
            { name: '–°–±', value: Math.max(1, Math.floor(totalUsers * 0.05)) },
            { name: '–í—Å', value: Math.max(1, Math.floor(totalUsers * 0.03)) }
          ];
          console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ü–µ–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–π');
        }

        // –ü–æ–¥—Å—á–∏—Ç–∞–µ–º –º–æ–¥–µ–ª–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        const modelsWithUsers = modelsData?.filter(model => model.user_id !== null).length || 0;
        
        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—Ä–∞–Ω–∞:', {
          '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–æ': allProfilesData?.length || 0,
          '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –∑–∞ 30 –¥–Ω–µ–π': recentProfilesData?.length || 0,
          '–º–æ–¥–µ–ª–µ–π': modelsData?.length || 0,
          '–≤—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ chat_messages': totalChatMessages,
          '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π': totalUserMessages,
          '—á–∞—Ç–æ–≤': totalChats,
          '–±–µ—Å–µ–¥': totalConversations,
          '–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º': userActivity,
          '—Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –¥–Ω—è–º': messagesPerDay
        });
        
        setStats({
          totalUsers: allProfilesData?.length || 0,
          activeUsers: allProfilesData?.filter(p => p.role === 'user').length || 0,
          totalModels: modelsData?.length || 0,
          modelsWithUsers: modelsWithUsers,
          userActivity,
          messagesPerDay,
          modelUsage
        });
        
      } catch (err: unknown) {
        console.error('Dashboard data fetch error:', err);
        setError(err instanceof Error ? err.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
      } finally {
        setLoading(false);
      }
    }
    
    fetchDashboardData();
  }, []);
  
  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-[50vh]">
        <LoadingSpinner size="lg" />
      </div>
    );
  }
  
  if (error) {
    return (
      <div className="bg-red-50 border border-red-200 rounded-lg p-6">
        <h2 className="text-lg font-medium text-red-800 mb-2">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</h2>
        <p className="text-red-700 mb-4">{error}</p>
        <button 
          onClick={() => window.location.reload()}
          className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors"
        >
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
      </div>
    );
  }
  
  // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –Ω–µ—Ç –æ—à–∏–±–∫–∏
  if (!stats) {
    return <div></div>;
  }

  return (
    <div className="space-y-6">
      <div className="pb-2 border-b border-gray-100">
        <h1 className="text-2xl font-semibold text-gray-900">–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h1>
        <p className="text-gray-500 text-sm mt-1">–û–±–∑–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã (–∞–Ω–∞–ª–∏–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)</p>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <StatsCard 
          title="–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" 
          value={stats.totalUsers.toLocaleString()} 
          icon={<Users className="h-5 w-5" />}
          trend={{ value: 12.5, isPositive: true }}
          description="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏"
          color="indigo"
        />
        <StatsCard 
          title="–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" 
          value={stats.activeUsers.toLocaleString()} 
          icon={<ActivitySquare className="h-5 w-5" />}
          trend={{ value: 8.2, isPositive: true }}
          description="–†–æ–ª—å: user"
          color="sky"
        />
        <StatsCard 
          title="–ú–æ–¥–µ–ª–µ–π –ò–ò" 
          value={stats.totalModels.toLocaleString()} 
          icon={<MessageSquare className="h-5 w-5" />}
          trend={{ value: 5.1, isPositive: true }}
          description="–í—Å–µ–≥–æ –≤ —Å–∏—Å—Ç–µ–º–µ"
          color="emerald"
        />
        <StatsCard 
          title="–ú–æ–¥–µ–ª–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏" 
          value={stats.modelsWithUsers.toLocaleString()} 
          icon={<TrendingUp className="h-5 w-5" />}
          trend={{ value: 2.3, isPositive: true }}
          description="–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ user_id"
          color="amber"
        />
      </div>
      
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <ChartCard 
          title="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏"
          description="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"
          type="line"
          data={stats.userActivity}
          dataKey="value"
          colors={{ stroke: '#4f46e5', fill: 'rgba(79, 70, 229, 0.1)' }}
        />
        <ChartCard 
          title="–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π"
          description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ (–∏—Å–∫–ª—é—á–∞—è –ò–ò –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ)"
          type="bar"
          data={stats.messagesPerDay}
          dataKey="value"
          colors={{ stroke: '#0ea5e9', fill: 'rgba(14, 165, 233, 0.1)' }}
        />
      </div>
      
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <ChartCard 
          title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π"
          description="–ú–æ–¥–µ–ª–∏ –ò–ò –ø–æ –ø–æ–ª—É"
          type="bar"
          data={stats.modelUsage}
          dataKey="value"
          colors={{ stroke: '#8b5cf6', fill: 'rgba(139, 92, 246, 0.1)' }}
        />
        <div className="card">
          <h3 className="text-lg font-medium text-gray-700 mb-4">–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</h3>
          <div className="space-y-4">
            <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
              <span className="text-sm text-gray-600">‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π</span>
              <span className="text-xs text-gray-400">—Å–µ–π—á–∞—Å</span>
            </div>
            <div className="flex items-center justify-between p-3 bg-blue-50 rounded-lg">
              <span className="text-sm text-blue-600">üìä {stats.totalUsers} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ</span>
              <span className="text-xs text-blue-400">profiles</span>
            </div>
            <div className="flex items-center justify-between p-3 bg-purple-50 rounded-lg">
              <span className="text-sm text-purple-600">ü§ñ {stats.totalModels} –º–æ–¥–µ–ª–µ–π –ò–ò</span>
              <span className="text-xs text-purple-400">ai_models</span>
            </div>
            <div className="flex items-center justify-between p-3 bg-green-50 rounded-lg">
              <span className="text-sm text-green-600">üìà –ê–Ω–∞–ª–∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏</span>
              <span className="text-xs text-green-400">30 –¥–Ω–µ–π</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
} 