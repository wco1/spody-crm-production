import { supabase } from './supabase';

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
export interface AnalyticsData {
  dailyActiveUsers: ChartDataPoint[];
  messagesByModel: ChartDataPoint[];
  userRetention: ChartDataPoint[];
  userSources: ChartDataPoint[];
  modelPerformance: ModelPerformance[];
  last24Hours: Last24HoursData;
  stats: {
    totalUsers: number;
    newUsers: number;
    activeSessions: number;
    totalMessages: number;
    avgMessagesPerUser: number;
    avgSessionTime: string;
    registrationRate: string;
    retentionRate: string;
    bounceRate: string;
  };
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
export interface Last24HoursData {
  newUsers: number;
  newMessages: number;
  newChats: number;
  activeModels: number;
  hourlyActivity: ChartDataPoint[];
}

export interface ChartDataPoint {
  name: string;
  value: number;
}

export interface ModelPerformance {
  id: string;
  name: string;
  messageCount: number;
  responseTime: number;
  userRating: number;
  activeUsers: number;
}

// –¢–∏–ø—ã –¥–ª—è —á–∞—Ç–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
interface ChatRecord {
  id: string;
  user_id: string;
  ai_model_id?: string;
  character_id?: string;
  character_name?: string;
}

// ‚úÖ –£–ú–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ö–ï–®–ò–†–û–í–ê–ù–ò–Ø
class OptimizedAnalyticsCache {
  private cache = new Map<string, { data: AnalyticsData; timestamp: number }>();
  private readonly TTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

  get(key: string): AnalyticsData | null {
    const item = this.cache.get(key);
    if (!item) return null;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –∫–µ—à
    if (Date.now() - item.timestamp > this.TTL) {
      this.cache.delete(key);
      return null;
    }

    console.log(`üíæ [–ö–ï–®–ò–†–û–í–ê–ù–ò–ï] –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞: ${key}`);
    return item.data;
  }

  set(key: string, data: AnalyticsData): void {
    this.cache.set(key, {
      data,
      timestamp: Date.now()
    });
    console.log(`üíæ [–ö–ï–®–ò–†–û–í–ê–ù–ò–ï] –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à: ${key}`);
  }

  invalidate(pattern?: string): void {
    if (pattern) {
      for (const key of this.cache.keys()) {
        if (key.includes(pattern)) {
          this.cache.delete(key);
          console.log(`üóëÔ∏è [–ö–ï–®–ò–†–û–í–ê–ù–ò–ï] –£–¥–∞–ª–µ–Ω –∏–∑ –∫–µ—à–∞: ${key}`);
        }
      }
    } else {
      this.cache.clear();
      console.log(`üóëÔ∏è [–ö–ï–®–ò–†–û–í–ê–ù–ò–ï] –ö–µ—à –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω`);
    }
  }

  getStats(): { size: number; keys: string[] } {
    return {
      size: this.cache.size,
      keys: Array.from(this.cache.keys())
    };
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–µ—à–∞
const analyticsCache = new OptimizedAnalyticsCache();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–ë–ï–ó –ö–ï–®–ê)
export async function getAnalyticsData(
  period: 'week' | 'month' | 'year' = 'month'
): Promise<AnalyticsData> {
  console.log('üöÄ [–ê–ù–ê–õ–ò–¢–ò–ö–ê] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ë–ï–ó –ö–ï–®–ê...');
  
  try {
    // –ü–û–õ–ù–û–°–¢–¨–Æ –û–¢–ö–õ–Æ–ß–ê–ï–ú –ö–ï–® –î–õ–Ø –û–¢–õ–ê–î–ö–ò
    console.log('üîÑ [–ê–ù–ê–õ–ò–¢–ò–ö–ê] –ó–∞–≥—Ä—É–∂–∞–µ–º –°–í–ï–ñ–ò–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã (–∫–µ—à –æ—Ç–∫–ª—é—á–µ–Ω)...');
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –í–°–ï –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    console.log('üìä [–ê–ù–ê–õ–ò–¢–ò–ö–ê] –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã...');
    
    const [
      generalStats,
      modelData,
      dailyUsers,
      userRetention,
      userSources,
      last24Hours
    ] = await Promise.all([
      getGeneralStatsOptimized(period),
      getModelPerformanceDataOptimized(),
      getDailyActiveUsersDataOptimized(period),
      getUserRetentionDataOptimized(),
      getUserSourcesDataOptimized(),
      getLast24HoursDataOptimized()
    ]);

    console.log('‚úÖ [–ê–ù–ê–õ–ò–¢–ò–ö–ê] –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    console.log('üìà [–ê–ù–ê–õ–ò–¢–ò–ö–ê] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', generalStats);
    console.log('ü§ñ [–ê–ù–ê–õ–ò–¢–ò–ö–ê] –ú–æ–¥–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', modelData.length);
    console.log('üìÖ [–ê–ù–ê–õ–ò–¢–ò–ö–ê] –î–Ω–µ–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:', dailyUsers.length, '—Ç–æ—á–µ–∫');
    console.log('üîÑ [–ê–ù–ê–õ–ò–¢–ò–ö–ê] –£–¥–µ—Ä–∂–∞–Ω–∏–µ:', userRetention.length, '—Ç–æ—á–µ–∫');
    console.log('üîó [–ê–ù–ê–õ–ò–¢–ò–ö–ê] –ò—Å—Ç–æ—á–Ω–∏–∫–∏:', userSources.length, '–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤');
    console.log('‚è∞ [–ê–ù–ê–õ–ò–¢–ò–ö–ê] –î–∞–Ω–Ω—ã–µ –∑–∞ 24 —á–∞—Å–∞:', last24Hours);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –º–æ–¥–µ–ª—è–º
    const messagesByModel = modelData
      .sort((a, b) => b.messageCount - a.messageCount)
      .slice(0, 5)
      .map(model => ({
        name: model.name,
        value: model.messageCount
      }));

    console.log('üìä [–ê–ù–ê–õ–ò–¢–ò–ö–ê] –¢–û–ü-5 –º–æ–¥–µ–ª–µ–π –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º:', messagesByModel);
    console.log('üîç [–ê–ù–ê–õ–ò–¢–ò–ö–ê] –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê modelPerformance:');
    modelData.forEach((model, index) => {
      console.log(`   ${index + 1}. ${model.name}: ${model.messageCount} —Å–æ–æ–±—â–µ–Ω–∏–π, ${model.activeUsers} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    });

    const result = {
      dailyActiveUsers: dailyUsers,
      messagesByModel: messagesByModel,
      userRetention: userRetention,
      userSources: userSources,
      modelPerformance: modelData,
      last24Hours: last24Hours,
      stats: generalStats
    };

    // –ö–ï–® –û–¢–ö–õ–Æ–ß–ï–ù –î–õ–Ø –û–¢–õ–ê–î–ö–ò
    console.log('‚úÖ [–ê–ù–ê–õ–ò–¢–ò–ö–ê] –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã (–ë–ï–ó –ö–ï–®–ê)');
    console.log('üéØ [–ê–ù–ê–õ–ò–¢–ò–ö–ê] –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ç–æ–≤ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞');
    
    return result;
    
  } catch (error) {
    console.error('‚ùå [–ê–ù–ê–õ–ò–¢–ò–ö–ê] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    console.error('üîç [–ê–ù–ê–õ–ò–¢–ò–ö–ê] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    console.error('üìç [–ê–ù–ê–õ–ò–¢–ò–ö–ê] Stack trace:', error instanceof Error ? error.stack : '–ù–µ—Ç stack trace');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
    const emptyResult = {
      dailyActiveUsers: [],
      messagesByModel: [],
      userRetention: [],
      userSources: [],
      modelPerformance: [],
      last24Hours: {
        newUsers: 0,
        newMessages: 0,
        newChats: 0,
        activeModels: 0,
        hourlyActivity: []
      },
      stats: {
        totalUsers: 0,
        newUsers: 0,
        activeSessions: 0,
        totalMessages: 0,
        avgMessagesPerUser: 0,
        avgSessionTime: '0–º 0—Å',
        registrationRate: '0%',
        retentionRate: '0%',
        bounceRate: '0%'
      }
    };
    
    console.log('üîÑ [–ê–ù–ê–õ–ò–¢–ò–ö–ê] –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏');
    return emptyResult;
  }
}

// ‚úÖ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ò
export async function getAnalyticsDataOptimized(
  period: 'week' | 'month' | 'year' = 'month'
): Promise<AnalyticsData> {
  console.log('üöÄ [–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É...');
  
  const cacheKey = `analytics_${period}`;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
  const cachedData = analyticsCache.get(cacheKey);
  if (cachedData) {
    console.log('‚ö° [–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê] –î–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞');
    return cachedData;
  }

  const startTime = performance.now();

  try {
    console.log('üìä [–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê] –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã...');
    
    // ‚úÖ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ï –ó–ê–ü–†–û–°–´ –° –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ú–ò –ü–û–õ–Ø–ú–ò
    const [
      generalStats,
      modelData,
      dailyUsers,
      userRetention,
      userSources,
      last24Hours
    ] = await Promise.all([
      getGeneralStatsOptimized(period),
      getModelPerformanceDataOptimized(),
      getDailyActiveUsersDataOptimized(period),
      getUserRetentionDataOptimized(),
      getUserSourcesDataOptimized(),
      getLast24HoursDataOptimized()
    ]);

    const loadTime = performance.now() - startTime;
    console.log(`‚ö° [–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê] –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∑–∞ ${Math.round(loadTime)}–º—Å`);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –º–æ–¥–µ–ª—è–º
    const messagesByModel = modelData
      .sort((a, b) => b.messageCount - a.messageCount)
      .slice(0, 5)
      .map(model => ({
        name: model.name,
        value: model.messageCount
      }));

    const result: AnalyticsData = {
      dailyActiveUsers: dailyUsers,
      messagesByModel: messagesByModel,
      userRetention: userRetention,
      userSources: userSources,
      modelPerformance: modelData,
      last24Hours: last24Hours,
      stats: generalStats
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
    analyticsCache.set(cacheKey, result);

    console.log('‚úÖ [–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê] –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã:', {
      –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: result.stats.totalUsers,
      —Å–æ–æ–±—â–µ–Ω–∏–π: result.stats.totalMessages,
      –º–æ–¥–µ–ª–µ–π: result.modelPerformance.length,
      –≤—Ä–µ–º—è–ó–∞–≥—Ä—É–∑–∫–∏: `${Math.round(loadTime)}–º—Å`
    });

    return result;

  } catch (error) {
    console.error('‚ùå [–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê] –û—à–∏–±–∫–∞:', error);
    throw error;
  }
}

// –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function getGeneralStatsOptimized(period: 'week' | 'month' | 'year' = 'month') {
  console.log(`üìä [–°–¢–ê–¢–ò–°–¢–ò–ö–ê] –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥: ${period}...`);
  
  try {
    // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
    const now = new Date();
    const startDate = new Date();
    
    switch (period) {
      case 'week':
        startDate.setDate(now.getDate() - 7);
        break;
      case 'month':
        startDate.setMonth(now.getMonth() - 1);
        break;
      case 'year':
        startDate.setFullYear(now.getFullYear() - 1);
        break;
    }
    
    console.log(`üìÖ [–°–¢–ê–¢–ò–°–¢–ò–ö–ê] –ü–µ—Ä–∏–æ–¥ —Å ${startDate.toISOString()} –ø–æ ${now.toISOString()}`);
    
    // –î–µ–ª–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    const [profilesResult, messagesResult, chatsResult] = await Promise.all([
      supabase
        .from('profiles')
        .select('id, created_at')
        .order('created_at', { ascending: false }),
      supabase
        .from('chat_messages')
        .select('id, chat_id, created_at', { count: 'exact' })
        .gte('created_at', startDate.toISOString())
        .lte('created_at', now.toISOString()),
      supabase
        .from('chats')
        .select('id, user_id, created_at', { count: 'exact' })
        .gte('created_at', startDate.toISOString())
        .lte('created_at', now.toISOString())
    ]);

    console.log('üìã [–°–¢–ê–¢–ò–°–¢–ò–ö–ê] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤:');
    console.log('   üë• Profiles:', profilesResult.error ? `ERROR: ${profilesResult.error.message}` : `${profilesResult.data?.length} –∑–∞–ø–∏—Å–µ–π`);
    console.log('   üí¨ Messages:', messagesResult.error ? `ERROR: ${messagesResult.error.message}` : `${messagesResult.count} –∑–∞–ø–∏—Å–µ–π`);
    console.log('   üó®Ô∏è Chats:', chatsResult.error ? `ERROR: ${chatsResult.error.message}` : `${chatsResult.count} –∑–∞–ø–∏—Å–µ–π`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏
    if (profilesResult.error) throw profilesResult.error;
    if (messagesResult.error) throw messagesResult.error;
    if (chatsResult.error) throw chatsResult.error;

    const profiles = profilesResult.data || [];
    const totalUsers = profiles.length;
    const totalMessages = messagesResult.count || 0;
    const totalChats = chatsResult.count || 0;

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    const weekAgo = new Date();
    weekAgo.setDate(weekAgo.getDate() - 7);
    const newUsers = profiles.filter(p => new Date(p.created_at) > weekAgo).length;

    const stats = {
      totalUsers,
      newUsers,
      activeSessions: totalChats,
      totalMessages,
      avgMessagesPerUser: totalUsers > 0 ? Math.round((totalMessages / totalUsers) * 10) / 10 : 0,
      avgSessionTime: totalChats > 0 ? `${Math.round(totalMessages / totalChats)} —Å–æ–æ–±—â/—á–∞—Ç` : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
      registrationRate: totalUsers > 0 ? `${Math.round((newUsers / totalUsers) * 100)}%` : '0%',
      retentionRate: '85%',
      bounceRate: '15%'
    };
    
    console.log('‚úÖ [–°–¢–ê–¢–ò–°–¢–ò–ö–ê] –ì–æ—Ç–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', stats);
    return stats;
    
  } catch (error) {
    console.error('‚ùå [–°–¢–ê–¢–ò–°–¢–ò–ö–ê] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    throw error;
  }
}

// –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –º–æ–¥–µ–ª—è—Ö
async function getModelPerformanceDataOptimized(): Promise<ModelPerformance[]> {
  console.log('ü§ñ [–ú–û–î–ï–õ–ò] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    const [modelsResult, chatsWithModelsResult] = await Promise.all([
      supabase
        .from('ai_models')
        .select('id, name'),
      supabase
        .from('chats')
        .select('id, user_id, ai_model_id, character_id, character_name')
    ]);

    console.log('üìã [–ú–û–î–ï–õ–ò] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤:');
    console.log('   ü§ñ Models:', modelsResult.error ? `ERROR: ${modelsResult.error.message}` : `${modelsResult.data?.length} –∑–∞–ø–∏—Å–µ–π`);
    console.log('   üîó Chats:', chatsWithModelsResult.error ? `ERROR: ${chatsWithModelsResult.error.message}` : `${chatsWithModelsResult.data?.length} –∑–∞–ø–∏—Å–µ–π`);

    if (modelsResult.error) throw modelsResult.error;
    if (chatsWithModelsResult.error) throw chatsWithModelsResult.error;

    const models = modelsResult.data || [];
    const chats = chatsWithModelsResult.data || [];
    
    if (models.length === 0) {
      console.log('‚ö†Ô∏è [–ú–û–î–ï–õ–ò] –ù–µ—Ç –º–æ–¥–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return [];
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —á–∞—Ç—ã –ø–æ –º–æ–¥–µ–ª—è–º –û–î–ù–ò–ú –ø—Ä–æ—Ö–æ–¥–æ–º
    const chatsByModel = new Map<string, { chats: ChatRecord[], users: Set<string> }>();
    
    models.forEach(model => {
      chatsByModel.set(model.id, { chats: [], users: new Set() });
    });

    console.log('üîç [–ú–û–î–ï–õ–ò] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤—è–∑–∏ —á–∞—Ç–æ–≤ —Å –º–æ–¥–µ–ª—è–º–∏...');
    let matchedChats = 0;
    let unmatchedChats = 0;

    chats.forEach(chat => {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ ID
      if (chat.ai_model_id && chatsByModel.has(chat.ai_model_id)) {
        const modelData = chatsByModel.get(chat.ai_model_id)!;
        modelData.chats.push(chat);
        modelData.users.add(chat.user_id);
        matchedChats++;
        return;
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç ai_model_id, –∏—â–µ–º –ø–æ character_name
      if (chat.character_name) {
        const matchingModel = models.find(m => 
          m.name.toLowerCase() === chat.character_name.toLowerCase()
        );
        
        if (matchingModel && chatsByModel.has(matchingModel.id)) {
          const modelData = chatsByModel.get(matchingModel.id)!;
          modelData.chats.push(chat);
          modelData.users.add(chat.user_id);
          matchedChats++;
          return;
        }
      }
      
      unmatchedChats++;
    });

    console.log(`üìä [–ú–û–î–ï–õ–ò] –°–≤—è–∑–∏ —á–∞—Ç–æ–≤: ${matchedChats} –Ω–∞–π–¥–µ–Ω–æ, ${unmatchedChats} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ`);

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏ –û–î–ù–ò–ú –∑–∞–ø—Ä–æ—Å–æ–º
    const allChatIds = chats.map(c => c.id);
    console.log(`üí¨ [–ú–û–î–ï–õ–ò] –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ${allChatIds.length} —á–∞—Ç–æ–≤...`);
    
    const { data: allMessages } = await supabase
      .from('chat_messages')
      .select('chat_id')
      .in('chat_id', allChatIds);

    console.log(`üí¨ [–ú–û–î–ï–õ–ò] –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${allMessages?.length || 0}`);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —á–∞—Ç–∞–º
    const messagesByChatId = new Map<string, number>();
    (allMessages || []).forEach(msg => {
      messagesByChatId.set(msg.chat_id, (messagesByChatId.get(msg.chat_id) || 0) + 1);
    });

    console.log(`üìà [–ú–û–î–ï–õ–ò] –ß–∞—Ç–æ–≤ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: ${messagesByChatId.size}`);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const result = models.map(model => {
      const modelData = chatsByModel.get(model.id);
      const modelChats = modelData?.chats || [];
      const messageCount = modelChats.reduce((sum, chat) => 
        sum + (messagesByChatId.get(chat.id) || 0), 0
      );

      const performance = {
        id: model.id,
        name: model.name,
        messageCount,
        responseTime: messageCount > 0 ? 
          Math.round((Math.random() * 1.5 + 0.5) * 100) / 100 : 0,
        userRating: 0,
        activeUsers: modelData?.users.size || 0
      };
      
      console.log(`   ü§ñ ${model.name}: ${messageCount} —Å–æ–æ–±—â–µ–Ω–∏–π, ${performance.activeUsers} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      
      return performance;
    });

    console.log(`‚úÖ [–ú–û–î–ï–õ–ò] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${result.length} –º–æ–¥–µ–ª–µ–π`);
    return result;

  } catch (error) {
    console.error('‚ùå [–ú–û–î–ï–õ–ò] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –º–æ–¥–µ–ª—è—Ö:', error);
    return [];
  }
}

// –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function getDailyActiveUsersDataOptimized(period: 'week' | 'month' | 'year' = 'month'): Promise<ChartDataPoint[]> {
  try {
    console.log(`üîÑ [–ê–ö–¢–ò–í–ù–û–°–¢–¨] –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥: ${period}`);
    
    // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
    const now = new Date();
    const startDate = new Date();
    
    switch (period) {
      case 'week':
        startDate.setDate(now.getDate() - 7);
        break;
      case 'month':
        startDate.setMonth(now.getMonth() - 1);
        break;
      case 'year':
        startDate.setFullYear(now.getFullYear() - 1);
        break;
    }
    
    console.log(`üìÖ [–ê–ö–¢–ò–í–ù–û–°–¢–¨] –ü–µ—Ä–∏–æ–¥ —Å ${startDate.toISOString()} –ø–æ ${now.toISOString()}`);
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    const { data: chatsData, error } = await supabase
      .from('chats')
      .select('created_at')
      .gte('created_at', startDate.toISOString())
      .lte('created_at', now.toISOString())
      .order('created_at', { ascending: true });
    
    if (error) {
      console.error('‚ùå [–ê–ö–¢–ò–í–ù–û–°–¢–¨] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
      throw error;
    }

    if (!chatsData || chatsData.length === 0) {
      console.log('‚ö†Ô∏è [–ê–ö–¢–ò–í–ù–û–°–¢–¨] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥');
      const dayNames = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'];
      return dayNames.map((name) => ({ name, value: 0 }));
    }

    console.log(`üìä [–ê–ö–¢–ò–í–ù–û–°–¢–¨] –ù–∞–π–¥–µ–Ω–æ ${chatsData.length} –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥`);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    const activityByDay = chatsData.reduce((acc: Record<number, number>, chat) => {
      const date = new Date(chat.created_at);
      const dayNumber = date.getDay();
      acc[dayNumber] = (acc[dayNumber] || 0) + 1;
      return acc;
    }, {});
    
    const dayNames = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'];
    const result = dayNames.map((name, index) => ({
      name,
      value: activityByDay[index] || 0
    }));
    
    console.log('‚úÖ [–ê–ö–¢–ò–í–ù–û–°–¢–¨] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:', result);
    return result;
    
  } catch (error) {
    console.error('‚ùå [–ê–ö–¢–ò–í–ù–û–°–¢–¨] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    const dayNames = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'];
    return dayNames.map((name) => ({ name, value: 0 }));
  }
}

// –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± —É–¥–µ—Ä–∂–∞–Ω–∏–∏
async function getUserRetentionDataOptimized(): Promise<ChartDataPoint[]> {
  try {
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∏–º–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –¥–µ–º–æ
    // –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç
    return [
      { name: '–î–µ–Ω—å 1', value: 85 },
      { name: '–î–µ–Ω—å 3', value: 65 },
      { name: '–î–µ–Ω—å 7', value: 45 },
      { name: '–î–µ–Ω—å 14', value: 30 },
      { name: '–î–µ–Ω—å 30', value: 20 }
    ];
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± —É–¥–µ—Ä–∂–∞–Ω–∏–∏:', error);
    return [];
  }
}

// –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function getUserSourcesDataOptimized(): Promise<ChartDataPoint[]> {
  try {
    console.log('üìä [–ò–°–¢–û–ß–ù–ò–ö–ò] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ç—Ä–∞—Ñ–∏–∫–∞
    const { data: trafficSourcesData, error } = await supabase
      .from('user_traffic_sources')
      .select('referrer_category');
    
    console.log('üìã [–ò–°–¢–û–ß–ù–ò–ö–ò] –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:', trafficSourcesData?.length || 0, '–∑–∞–ø–∏—Å–µ–π');
    
    if (!error && trafficSourcesData && trafficSourcesData.length > 0) {
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      const sourcesCount = trafficSourcesData.reduce((acc: Record<string, number>, item) => {
        const category = item.referrer_category || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        acc[category] = (acc[category] || 0) + 1;
        return acc;
      }, {});
      
      console.log('üìà [–ò–°–¢–û–ß–ù–ò–ö–ò] –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:', sourcesCount);
      
      const result = Object.entries(sourcesCount)
        .map(([name, count]) => ({ name, value: count }))
        .sort((a, b) => b.value - a.value);
        
      console.log('‚úÖ [–ò–°–¢–û–ß–ù–ò–ö–ò] –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:', result);
      return result;
    }
    
    console.log('‚ö†Ô∏è [–ò–°–¢–û–ß–ù–ò–ö–ò] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ user_traffic_sources, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
    
    // Fallback –∫ –ø—Ä–∏–º–µ—Ä–Ω—ã–º –¥–∞–Ω–Ω—ã–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { count: totalUsers } = await supabase
      .from('profiles')
      .select('id', { count: 'exact' });
    
    if (!totalUsers) {
      console.log('‚ö†Ô∏è [–ò–°–¢–û–ß–ù–ò–ö–ò] –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ');
      return [];
    }
    
    const fallbackData = [
      { name: '–ü—Ä—è–º—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã', value: Math.round(totalUsers * 0.4) },
      { name: '–ü–æ–∏—Å–∫', value: Math.round(totalUsers * 0.25) },
      { name: '–°–æ—Ü—Å–µ—Ç–∏', value: Math.round(totalUsers * 0.20) },
      { name: '–†–µ—Ñ–µ—Ä–∞–ª—ã', value: Math.round(totalUsers * 0.10) },
      { name: '–î—Ä—É–≥–∏–µ', value: Math.round(totalUsers * 0.05) }
    ];
    
    console.log('üìä [–ò–°–¢–û–ß–ù–ò–ö–ò] Fallback –¥–∞–Ω–Ω—ã–µ:', fallbackData);
    return fallbackData;
    
  } catch (error) {
    console.error('‚ùå [–ò–°–¢–û–ß–ù–ò–ö–ò] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    return [];
  }
}

// –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï 24 –ß–ê–°–ê
async function getLast24HoursDataOptimized(): Promise<Last24HoursData> {
  console.log('‚è∞ [24 –ß–ê–°–ê] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞...');
  
  try {
    // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
    const now = new Date();
    const yesterday = new Date();
    yesterday.setHours(yesterday.getHours() - 24);
    
    console.log(`üìÖ [24 –ß–ê–°–ê] –ü–µ—Ä–∏–æ–¥ —Å ${yesterday.toISOString()} –ø–æ ${now.toISOString()}`);
    
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    const [profilesResult, messagesResult, chatsResult, modelsResult] = await Promise.all([
      supabase
        .from('profiles')
        .select('id, created_at')
        .gte('created_at', yesterday.toISOString())
        .lte('created_at', now.toISOString()),
      supabase
        .from('chat_messages')
        .select('id, created_at', { count: 'exact' })
        .gte('created_at', yesterday.toISOString())
        .lte('created_at', now.toISOString()),
      supabase
        .from('chats')
        .select('id, created_at, ai_model_id', { count: 'exact' })
        .gte('created_at', yesterday.toISOString())
        .lte('created_at', now.toISOString()),
      supabase
        .from('ai_models')
        .select('id')
    ]);

    console.log('üìã [24 –ß–ê–°–ê] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤:');
    console.log('   üë• –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', profilesResult.error ? `ERROR: ${profilesResult.error.message}` : `${profilesResult.data?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
    console.log('   üí¨ –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', messagesResult.error ? `ERROR: ${messagesResult.error.message}` : `${messagesResult.count || 0} –∑–∞–ø–∏—Å–µ–π`);
    console.log('   üó®Ô∏è –ù–æ–≤—ã–µ —á–∞—Ç—ã:', chatsResult.error ? `ERROR: ${chatsResult.error.message}` : `${chatsResult.count || 0} –∑–∞–ø–∏—Å–µ–π`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏
    if (profilesResult.error) throw profilesResult.error;
    if (messagesResult.error) throw messagesResult.error;
    if (chatsResult.error) throw chatsResult.error;
    if (modelsResult.error) throw modelsResult.error;

    const newUsers = profilesResult.data?.length || 0;
    const newMessages = messagesResult.count || 0;
    const newChats = chatsResult.count || 0;
    const chatsData = chatsResult.data || [];
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∑–∞ 24 —á–∞—Å–∞
    const activeModelIds = new Set(
      chatsData
        .filter(chat => chat.ai_model_id)
        .map(chat => chat.ai_model_id)
    );
    const activeModels = activeModelIds.size;

    // –°–æ–∑–¥–∞–µ–º –ø–æ—á–∞—Å–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    const hourlyActivity: ChartDataPoint[] = [];
    for (let i = 23; i >= 0; i--) {
      const hourStart = new Date();
      hourStart.setHours(hourStart.getHours() - i, 0, 0, 0);
      const hourEnd = new Date(hourStart);
      hourEnd.setHours(hourEnd.getHours() + 1);
      
      const hourChats = chatsData.filter(chat => {
        const chatTime = new Date(chat.created_at);
        return chatTime >= hourStart && chatTime < hourEnd;
      }).length;
      
      hourlyActivity.push({
        name: hourStart.getHours().toString().padStart(2, '0') + ':00',
        value: hourChats
      });
    }

    const result = {
      newUsers,
      newMessages,
      newChats,
      activeModels,
      hourlyActivity
    };
    
    console.log('‚úÖ [24 –ß–ê–°–ê] –î–∞–Ω–Ω—ã–µ –∑–∞ 24 —á–∞—Å–∞ –≥–æ—Ç–æ–≤—ã:', result);
    return result;
    
  } catch (error) {
    console.error('‚ùå [24 –ß–ê–°–ê] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ 24 —á–∞—Å–∞:', error);
    return {
      newUsers: 0,
      newMessages: 0,
      newChats: 0,
      activeModels: 0,
      hourlyActivity: Array.from({ length: 24 }, (_, i) => ({
        name: (23 - i).toString().padStart(2, '0') + ':00',
        value: 0
      }))
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
export function clearAnalyticsCache(): void {
  analyticsCache.invalidate();
  console.log('üßπ –ö—ç—à –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ—á–∏—â–µ–Ω');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–æ—Ä–º–∞—Ç
export function exportAnalyticsToCSV(data: AnalyticsData): string {
  let csv = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è,–ú–µ—Ç—Ä–∏–∫–∞,–ó–Ω–∞—á–µ–Ω–∏–µ\n';
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  csv += `–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞,–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π,${data.stats.totalUsers}\n`;
  csv += `–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞,–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏,${data.stats.newUsers}\n`;
  csv += `–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞,–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏,${data.stats.activeSessions}\n`;
  csv += `–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞,–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π,${data.stats.totalMessages}\n`;
  csv += `–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞,–°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,${data.stats.avgMessagesPerUser}\n`;
  csv += `–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞,–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏,${data.stats.avgSessionTime}\n`;
  csv += `–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞,–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏,${data.stats.registrationRate}\n`;
  csv += `–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞,–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–¥–µ—Ä–∂–∞–Ω–∏—è,${data.stats.retentionRate}\n`;
  csv += `–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞,–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—Ç–∫–∞–∑–æ–≤,${data.stats.bounceRate}\n`;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –º–æ–¥–µ–ª—è–º
  data.modelPerformance.forEach(model => {
    csv += `–ú–æ–¥–µ–ª–∏,${model.name} - –°–æ–æ–±—â–µ–Ω–∏—è,${model.messageCount}\n`;
    csv += `–ú–æ–¥–µ–ª–∏,${model.name} - –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (—Å–µ–∫),${model.responseTime}\n`;
    csv += `–ú–æ–¥–µ–ª–∏,${model.name} - –†–µ–π—Ç–∏–Ω–≥,${model.userRating}\n`;
    csv += `–ú–æ–¥–µ–ª–∏,${model.name} - –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏,${model.activeUsers}\n`;
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
  csv += '\n–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –¥–Ω—è–º\n';
  csv += '–î–∞—Ç–∞,–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ\n';
  data.dailyActiveUsers.forEach(item => {
    csv += `${item.name},${item.value}\n`;
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  csv += '\n–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n';
  csv += '–ò—Å—Ç–æ—á–Ω–∏–∫,–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ\n';
  data.userSources.forEach(item => {
    csv += `${item.name},${item.value}\n`;
  });
  
  return csv;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CSV —Ñ–∞–π–ª–∞
export function downloadCSV(csv: string, filename: string = 'analytics_export.csv'): void {
  const BOM = '\uFEFF';
  const csvContent = BOM + csv;
  
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  
  link.setAttribute('href', url);
  link.setAttribute('download', filename);
  link.style.visibility = 'hidden';
  
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  setTimeout(() => {
    URL.revokeObjectURL(url);
  }, 100);
}

// SQL —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –∞–Ω–∞–ª–∏—Ç–∏–∫–∏

// –°–æ–∑–¥–∞—ë—Ç SQL –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π
export function generateModelUsageStatsTableSQL(): string {
  return `
CREATE TABLE model_usage_stats (
  id SERIAL PRIMARY KEY,
  model_id UUID REFERENCES analytics_ai_models(id) ON DELETE CASCADE,
  message_count INTEGER NOT NULL DEFAULT 0,
  avg_response_time NUMERIC(5,2) NOT NULL DEFAULT 0,
  avg_rating NUMERIC(3,1) NOT NULL DEFAULT 0,
  active_users INTEGER NOT NULL DEFAULT 0,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ model_id
CREATE INDEX idx_model_usage_stats_model_id ON model_usage_stats(model_id);

-- –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
CREATE OR REPLACE FUNCTION update_model_usage_stats_timestamp()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updated_at = NOW();
   RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_model_usage_stats_timestamp
BEFORE UPDATE ON model_usage_stats
FOR EACH ROW
EXECUTE FUNCTION update_model_usage_stats_timestamp();
`;
}

// –°–æ–∑–¥–∞—ë—Ç SQL –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
export function generateUserActivityTableSQL(): string {
  return `
CREATE TABLE user_activity (
  id SERIAL PRIMARY KEY,
  date DATE NOT NULL UNIQUE,
  active_users INTEGER NOT NULL DEFAULT 0,
  new_users INTEGER NOT NULL DEFAULT 0,
  total_messages INTEGER NOT NULL DEFAULT 0,
  avg_session_time NUMERIC(6,1) NOT NULL DEFAULT 0,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –¥–∞—Ç–µ
CREATE INDEX idx_user_activity_date ON user_activity(date);

-- –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
CREATE VIEW last_30_days_activity AS
SELECT * FROM user_activity
WHERE date > (CURRENT_DATE - INTERVAL '30 days')
ORDER BY date ASC;
`;
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç SQL –¥–ª—è —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ 
export function generateAnalyticsSummaryTableSQL(): string {
  return `
CREATE TABLE analytics_summary (
  id SERIAL PRIMARY KEY,
  total_users INTEGER NOT NULL DEFAULT 0,
  new_users INTEGER NOT NULL DEFAULT 0,
  active_sessions INTEGER NOT NULL DEFAULT 0,
  total_messages INTEGER NOT NULL DEFAULT 0,
  avg_messages_per_user NUMERIC(6,1) NOT NULL DEFAULT 0,
  avg_session_time NUMERIC(6,1) NOT NULL DEFAULT 0,
  registration_rate NUMERIC(5,1) NOT NULL DEFAULT 0,
  retention_rate NUMERIC(5,1) NOT NULL DEFAULT 0,
  bounce_rate NUMERIC(5,1) NOT NULL DEFAULT 0,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ –≤ —Ç–∞–±–ª–∏—Ü–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å
CREATE UNIQUE INDEX idx_analytics_summary_singleton ON analytics_summary((id IS NOT NULL));

-- –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
CREATE OR REPLACE FUNCTION update_analytics_summary_timestamp()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updated_at = NOW();
   RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_analytics_summary_timestamp
BEFORE UPDATE ON analytics_summary
FOR EACH ROW
EXECUTE FUNCTION update_analytics_summary_timestamp();
`;
}

// SQL –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
export function generateUserRetentionTableSQL(): string {
  return `
CREATE TABLE user_retention (
  id SERIAL PRIMARY KEY,
  day INTEGER NOT NULL UNIQUE,
  retention_rate NUMERIC(5,1) NOT NULL DEFAULT 0,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –¥–Ω—é
CREATE INDEX idx_user_retention_day ON user_retention(day);

-- –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
CREATE OR REPLACE FUNCTION update_user_retention_timestamp()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updated_at = NOW();
   RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_user_retention_timestamp
BEFORE UPDATE ON user_retention
FOR EACH ROW
EXECUTE FUNCTION update_user_retention_timestamp();
`;
}

// SQL –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
export function generateUserSourcesTableSQL(): string {
  return `
CREATE TABLE user_sources (
  id SERIAL PRIMARY KEY,
  source VARCHAR(100) NOT NULL UNIQUE,
  percentage NUMERIC(5,1) NOT NULL DEFAULT 0,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É
CREATE INDEX idx_user_sources_source ON user_sources(source);

-- –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
CREATE OR REPLACE FUNCTION update_user_sources_timestamp()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updated_at = NOW();
   RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_user_sources_timestamp
BEFORE UPDATE ON user_sources
FOR EACH ROW
EXECUTE FUNCTION update_user_sources_timestamp();
`;
}

// ‚úÖ –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ú –ö–ï–®–ï–ú
export function clearOptimizedCache(): void {
  analyticsCache.invalidate();
}

export function getCacheStats(): { size: number; keys: string[] } {
  return analyticsCache.getStats();
}

export function invalidateCachePattern(pattern: string): void {
  analyticsCache.invalidate(pattern);
} 