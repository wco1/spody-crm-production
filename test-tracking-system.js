const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://ztjkqjqjqjqjqjqjqjqj.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á

const supabase = createClient(supabaseUrl, supabaseKey);

async function testTrackingSystem() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–µ–∫–∏–Ω–≥–∞...\n');

  try {
    // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–µ–∫–∏–Ω–≥–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏
    console.log('1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–µ–∫–∏–Ω–≥–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫...');
    
    const testLinks = [
      {
        name: 'Facebook –†–µ–∫–ª–∞–º–∞',
        code: 'fb_test_001',
        source: 'facebook',
        medium: 'cpc',
        campaign: 'summer_2024',
        content: 'banner_top',
        url: 'http://localhost:3000?utm_source=facebook&utm_medium=cpc&utm_campaign=summer_2024&utm_content=banner_top&ref=fb_test_001',
        is_active: true
      },
      {
        name: 'Google Ads',
        code: 'google_001',
        source: 'google',
        medium: 'cpc',
        campaign: 'brand_keywords',
        url: 'http://localhost:3000?utm_source=google&utm_medium=cpc&utm_campaign=brand_keywords&ref=google_001',
        is_active: true
      },
      {
        name: 'Telegram –∫–∞–Ω–∞–ª',
        code: 'tg_channel',
        source: 'telegram',
        medium: 'social',
        campaign: 'organic_post',
        url: 'http://localhost:3000?utm_source=telegram&utm_medium=social&utm_campaign=organic_post&ref=tg_channel',
        is_active: true
      }
    ];

    for (const link of testLinks) {
      const { data, error } = await supabase
        .from('tracking_links')
        .insert(link)
        .select();
      
      if (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ ${link.name}:`, error.message);
      } else {
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞: ${link.name} (${link.code})`);
      }
    }

    // 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ç—Ä–∞—Ñ–∏–∫–∞
    console.log('\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ç—Ä–∞—Ñ–∏–∫–∞...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { data: users, error: usersError } = await supabase
      .from('profiles')
      .select('id')
      .limit(10);

    if (usersError || !users || users.length === 0) {
      console.log('‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏–Ω–≥–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏
    const { data: trackingLinks } = await supabase
      .from('tracking_links')
      .select('id, code, source');

    const trafficSources = [
      { category: '–°–æ—Ü—Å–µ—Ç–∏', utm_source: 'facebook', utm_medium: 'social' },
      { category: '–ü–æ–∏—Å–∫', utm_source: 'google', utm_medium: 'organic' },
      { category: '–ü–æ–∏—Å–∫', utm_source: 'yandex', utm_medium: 'organic' },
      { category: '–°–æ—Ü—Å–µ—Ç–∏', utm_source: 'telegram', utm_medium: 'social' },
      { category: '–°–æ—Ü—Å–µ—Ç–∏', utm_source: 'instagram', utm_medium: 'social' },
      { category: '–ü—Ä—è–º—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã', utm_source: null, utm_medium: null },
      { category: '–†–µ—Ñ–µ—Ä–∞–ª—ã', utm_source: 'partner_site', utm_medium: 'referral' },
      { category: 'Email', utm_source: 'newsletter', utm_medium: 'email' },
      { category: '–†–µ–∫–ª–∞–º–∞', utm_source: 'google', utm_medium: 'cpc' },
      { category: '–î—Ä—É–≥–∏–µ', utm_source: 'unknown', utm_medium: 'unknown' }
    ];

    for (let i = 0; i < users.length; i++) {
      const user = users[i];
      const sourceData = trafficSources[i % trafficSources.length];
      
      // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ç—Ä–µ–∫–∏–Ω–≥–æ–≤—É—é —Å—Å—ã–ª–∫—É
      let trackingLinkId = null;
      if (trackingLinks && sourceData.utm_source) {
        const matchingLink = trackingLinks.find(link => 
          link.source.toLowerCase() === sourceData.utm_source.toLowerCase()
        );
        trackingLinkId = matchingLink?.id;
      }

      const trafficRecord = {
        user_id: user.id,
        tracking_link_id: trackingLinkId,
        utm_source: sourceData.utm_source,
        utm_medium: sourceData.utm_medium,
        utm_campaign: sourceData.utm_source === 'facebook' ? 'summer_2024' : null,
        referrer_category: sourceData.category,
        first_visit_at: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000) // –°–ª—É—á–∞–π–Ω–∞—è –¥–∞—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
      };

      const { error } = await supabase
        .from('user_traffic_sources')
        .insert(trafficRecord);

      if (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${i + 1}:`, error.message);
      } else {
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—á–Ω–∏–∫–∞: ${sourceData.category} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${i + 1}`);
      }
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
    
    const { data: stats, error: statsError } = await supabase
      .from('user_traffic_sources')
      .select('referrer_category');

    if (statsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', statsError.message);
    } else {
      const categoryStats = stats.reduce((acc, item) => {
        const category = item.referrer_category || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        acc[category] = (acc[category] || 0) + 1;
        return acc;
      }, {});

      console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:');
      Object.entries(categoryStats)
        .sort(([,a], [,b]) => b - a)
        .forEach(([category, count]) => {
          console.log(`   ${category}: ${count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        });
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–∫–∏–Ω–≥–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏
    console.log('\n4Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫...');
    
    const { data: linkStats } = await supabase
      .from('tracking_links')
      .select(`
        name,
        code,
        source,
        user_traffic_sources(count)
      `);

    if (linkStats) {
      console.log('\nüîó –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Å—ã–ª–∫–∞–º:');
      linkStats.forEach(link => {
        const clicks = link.user_traffic_sources?.[0]?.count || 0;
        console.log(`   ${link.name} (${link.code}): ${clicks} –ø–µ—Ä–µ—Ö–æ–¥–æ–≤`);
      });
    }

    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('   1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL —Å–∫—Ä–∏–ø—Ç database-setup.sql –≤ Supabase');
    console.log('   2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É /tracking –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞–º–∏');
    console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–Ω–∞–ª–∏—Ç–∏–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ /analytics');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testTrackingSystem(); 